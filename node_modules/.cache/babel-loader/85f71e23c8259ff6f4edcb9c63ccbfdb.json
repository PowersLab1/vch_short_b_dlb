{"ast":null,"code":"'use strict';\n\nmodule.exports = linearRegression;\n\nvar help = require('./help');\n/**\n * Computes Linear Regression slope, intercept, r-squared and returns\n * a function which can be used for evaluating linear regression\n * at a particular x-value\n *\n * @param functionValuesX {Array}\n * @param functionValuesY {Array}\n * @returns {Object}\n */\n\n\nfunction linearRegression(functionValuesX, functionValuesY) {\n  var regression = {},\n      x = functionValuesX,\n      y = functionValuesY,\n      n = y.length,\n      sum_x = 0,\n      sum_y = 0,\n      sum_xy = 0,\n      sum_xx = 0,\n      sum_yy = 0;\n\n  for (var i = 0; i < y.length; i++) {\n    sum_x += x[i];\n    sum_y += y[i];\n    sum_xy += x[i] * y[i];\n    sum_xx += x[i] * x[i];\n    sum_yy += y[i] * y[i];\n  }\n\n  regression.slope = (n * sum_xy - sum_x * sum_y) / (n * sum_xx - sum_x * sum_x);\n  regression.intercept = (sum_y - regression.slope * sum_x) / n;\n  regression.rSquared = Math.pow((n * sum_xy - sum_x * sum_y) / Math.sqrt((n * sum_xx - sum_x * sum_x) * (n * sum_yy - sum_y * sum_y)), 2);\n\n  regression.evaluate = function (pointsToEvaluate) {\n    var x = help.makeItArrayIfItsNot(pointsToEvaluate),\n        result = [],\n        that = this;\n    x.forEach(function (point) {\n      result.push(that.slope * point + that.intercept);\n    });\n    return result;\n  };\n\n  return regression;\n}","map":null,"metadata":{},"sourceType":"script"}
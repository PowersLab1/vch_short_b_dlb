{"ast":null,"code":"//creates a stimulus structure \nexport function createStim() {\n  var stim = {\n    background: 255 / 2,\n    angle: Math.floor(Math.random() * 135) + 45,\n    // returns a random integer from 45 to 135\n    imsize: 256,\n    initcontrast: 0.5,\n    // initial contrast\n    threshold: 0.2,\n    // moch treshold\n    phases: [0, 0.25],\n    // phases either 0 and 0.25\n    phase: 0,\n    alpha: 0.5,\n    ppd: 160,\n    frequency: 0 // gabor spatial frequency\n\n  };\n  stim.phase = stim.phases[Math.round(Math.random())];\n  stim.frequency = 2 / stim.ppd;\n  return stim;\n}\n; //creates the gabor layer necessary for the stimulus \n\nexport function createGabor(stim, contrast) {\n  var xs = [];\n  var ys = [];\n\n  for (var x = 1; x < stim.imsize + 1; x++) {\n    for (var y = 1; y < stim.imsize + 1; y++) {\n      xs[(x - 1 + (y - 1) * stim.imsize) * 4 + 0] = x - (stim.imsize + 1) / 2;\n      xs[(x - 1 + (y - 1) * stim.imsize) * 4 + 1] = x - (stim.imsize + 1) / 2;\n      xs[(x - 1 + (y - 1) * stim.imsize) * 4 + 2] = x - (stim.imsize + 1) / 2;\n      xs[(x - 1 + (y - 1) * stim.imsize) * 4 + 3] = x - (stim.imsize + 1) / 2;\n      ys[(x - 1 + (y - 1) * stim.imsize) * 4 + 0] = y - (stim.imsize + 1) / 2;\n      ys[(x - 1 + (y - 1) * stim.imsize) * 4 + 1] = y - (stim.imsize + 1) / 2;\n      ys[(x - 1 + (y - 1) * stim.imsize) * 4 + 2] = y - (stim.imsize + 1) / 2;\n      ys[(x - 1 + (y - 1) * stim.imsize) * 4 + 3] = y - (stim.imsize + 1) / 2;\n    }\n  }\n\n  var patch = [];\n\n  for (var i = 0; i < xs.length && i < ys.length; i++) {\n    patch[i] = 0.5 * Math.cos(2 * Math.PI * (stim.frequency * (Math.sin(Math.PI / 180 * stim.angle) * xs[i] + Math.cos(Math.PI / 180 * stim.angle) * ys[i]) + stim.phase)) * contrast;\n  }\n\n  var grating = patch.map(function (x) {\n    return stim.background + x * stim.background;\n  });\n  return grating;\n} //this blends the two layers \n\nexport function blendfun(alpha, a, b) {\n  var stimulusArr = [];\n\n  for (var x = 0; x < a.length && x < b.length; x++) {\n    stimulusArr[x] = alpha * a[x] + (1 - alpha) * b[x];\n  }\n\n  return stimulusArr;\n}","map":{"version":3,"sources":["C:\\Users\\Alika\\Desktop\\VCH_Smith\\src\\Stim.js"],"names":["createStim","stim","background","angle","Math","floor","random","imsize","initcontrast","threshold","phases","phase","alpha","ppd","frequency","round","createGabor","contrast","xs","ys","x","y","patch","i","length","cos","PI","sin","grating","map","blendfun","a","b","stimulusArr"],"mappings":"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","sourcesContent":["//creates a stimulus structure \r\nexport function createStim( ){\r\n    var stim = {\r\n        background: 255/2,\r\n        angle: Math.floor(Math.random() * 135) + 45,   // returns a random integer from 45 to 135\r\n        imsize: 256, \r\n        initcontrast:  0.5,                  // initial contrast\r\n        threshold:     0.2,                  // moch treshold\r\n        phases: [0, 0.25],                   // phases either 0 and 0.25\r\n        phase: 0,\r\n        alpha: 0.5, \r\n        ppd: 160, \r\n        frequency: 0,                  // gabor spatial frequency\r\n    }\r\n\r\n    stim.phase = stim.phases[Math.round(Math.random())];\r\n    stim.frequency = 2 / stim.ppd; \r\n\r\n    return stim;\r\n};\r\n\r\n//creates the gabor layer necessary for the stimulus \r\nexport function createGabor( stim, contrast ){\r\n\r\n    var xs = []\r\n    var ys = []\r\n\r\n    for (var x = 1; x < stim.imsize + 1; x++ ){\r\n        for (var y = 1; y < stim.imsize + 1; y++ ){\r\n            xs[((x -1) + (y - 1) * stim.imsize) * 4 + 0] = x - ((stim.imsize + 1) / 2);\r\n            xs[((x -1) + (y - 1) * stim.imsize) * 4 + 1] = x - ((stim.imsize + 1) / 2);\r\n            xs[((x -1) + (y - 1) * stim.imsize) * 4 + 2] = x - ((stim.imsize + 1) / 2);\r\n            xs[((x -1) + (y - 1) * stim.imsize) * 4 + 3] = x - ((stim.imsize + 1) / 2);\r\n\r\n            ys[((x -1) + (y - 1) * stim.imsize) * 4 + 0] = y - ((stim.imsize + 1) / 2);\r\n            ys[((x -1) + (y - 1) * stim.imsize) * 4 + 1] = y - ((stim.imsize + 1) / 2);\r\n            ys[((x -1) + (y - 1) * stim.imsize) * 4 + 2] = y - ((stim.imsize + 1) / 2);\r\n            ys[((x -1) + (y - 1) * stim.imsize) * 4 + 3] = y - ((stim.imsize + 1) / 2);\r\n        }\r\n    }\r\n\r\n    var patch = []; \r\n\r\n    for(var i = 0; i < xs.length && i < ys.length; i++){\r\n        patch[i] = 0.5 * Math.cos(2 * Math.PI * (stim.frequency * (Math.sin( Math.PI / 180 * stim.angle) * xs[i] + Math.cos( Math.PI / 180 * stim.angle) * ys[i] ) + stim.phase)) * contrast; \r\n    }\r\n\r\n    var grating = patch.map( function(x) { return (stim.background + (x * stim.background)); });\r\n\r\n    return grating; \r\n}\r\n\r\n//this blends the two layers \r\nexport function blendfun( alpha, a, b ){\r\n    var stimulusArr = [];\r\n\r\n    for (var x = 0; x < a.length && x < b.length; x++ ){\r\n        stimulusArr[x] = alpha * a[x] + (1 - alpha) * b[x]; \r\n    }\r\n\r\n    return stimulusArr; \r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}
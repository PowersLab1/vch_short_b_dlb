{"ast":null,"code":"'use strict';\n\nvar help = require('./help');\n\nmodule.exports = evaluatePolynomial;\n/**\n * Evaluates interpolating polynomial at the set of numbers\n * or at a single number for the function y=f(x)\n *\n * @param {Number|Array} pointsToEvaluate     number or set of numbers\n *                                            for which polynomial is calculated\n * @param {Array} functionValuesX             set of distinct x values\n * @param {Array} functionValuesY             set of distinct y=f(x) values\n * @returns {Array}                           interpolating polynomial\n */\n\nfunction evaluatePolynomial(pointsToEvaluate, functionValuesX, functionValuesY) {\n  var results = [];\n  pointsToEvaluate = help.makeItArrayIfItsNot(pointsToEvaluate); // evaluate the interpolating polynomial for each point\n\n  pointsToEvaluate.forEach(function (point) {\n    results.push(nevillesIteratedInterpolation(point, functionValuesX, functionValuesY));\n  });\n  return results;\n}\n/**\n * Neville's Iterated Interpolation algorithm implementation\n * http://en.wikipedia.org/wiki/Neville's_algorithm <- for reference\n *\n * @param {Number} x                           number for which polynomial is calculated\n * @param {Array} X                            set of distinct x values\n * @param {Array} Y                            set of distinct y=f(x) values\n * @returns {number}                           interpolating polynomial\n */\n\n\nfunction nevillesIteratedInterpolation(x, X, Y) {\n  var Q = [Y];\n\n  for (var i = 1; i < X.length; i++) {\n    Q.push([]);\n\n    for (var j = 1; j <= i; j++) {\n      Q[j][i] = ((x - X[i - j]) * Q[j - 1][i] - (x - X[i]) * Q[j - 1][i - 1]) / (X[i] - X[i - j]);\n    }\n  }\n\n  return Q[j - 1][i - 1];\n}","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nvar help = require('./help');\n\nmodule.exports = evaluateLinear;\n/**\n * Evaluates interpolating line/lines at the set of numbers\n * or at a single number for the function y=f(x)\n *\n * @param {Number|Array} pointsToEvaluate     number or set of numbers\n *                                            for which polynomial is calculated\n * @param {Array} functionValuesX             set of distinct x values\n * @param {Array} functionValuesY             set of distinct y=f(x) values\n * @returns {Array}\n */\n\nfunction evaluateLinear(pointsToEvaluate, functionValuesX, functionValuesY) {\n  var results = [];\n  pointsToEvaluate = help.makeItArrayIfItsNot(pointsToEvaluate);\n  pointsToEvaluate.forEach(function (point) {\n    var index = help.findIntervalLeftBorderIndex(point, functionValuesX);\n    if (index == functionValuesX.length - 1) index--;\n    results.push(linearInterpolation(point, functionValuesX[index], functionValuesY[index], functionValuesX[index + 1], functionValuesY[index + 1]));\n  });\n  return results;\n}\n/**\n *\n * Evaluates y-value at given x point for line that passes\n * through the points (x0,y0) and (y1,y1)\n *\n * @param x\n * @param x0\n * @param y0\n * @param x1\n * @param y1\n * @returns {Number}\n */\n\n\nfunction linearInterpolation(x, x0, y0, x1, y1) {\n  var a = (y1 - y0) / (x1 - x0);\n  var b = -a * x0 + y0;\n  return a * x + b;\n}","map":null,"metadata":{},"sourceType":"script"}
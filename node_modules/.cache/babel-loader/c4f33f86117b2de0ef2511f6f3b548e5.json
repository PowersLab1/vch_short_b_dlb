{"ast":null,"code":"import { sumVector, QuestPdf, QuestRecompute, QuestCreate, QuestMean, QuestSd, QuestQuantile, QuestUpdate, PAL_Gumbel, indexOfMax } from \"./Quest.js\";\nexport function test() {\n  var math = require('mathjs');\n\n  var tGuess = 0.5,\n      tGuessSd = 0.1,\n      pThreshold = 0.75,\n      beta = 3.5,\n      delta = 0.01,\n      gamma = 0.01,\n      grain = 0.001,\n      range = .05;\n  var q1 = QuestCreate(tGuess, tGuessSd, pThreshold, beta, delta, gamma, grain, range); //console.log(q1); \n\n  var q2 = QuestCreate(tGuess, tGuessSd, pThreshold, beta, delta, gamma, grain, range);\n  q2.updatePdf = 1;\n  q2 = QuestUpdate(q2, 0.5, 1);\n  console.log(q2);\n  var t1 = QuestMean(q1); // Recommended by Pelli (1989) and King-Smith et al. (1994) as the best way to ascertain threshold.\n\n  var sd1 = QuestSd(q2);\n  var t2 = QuestMean(q2); // Recommended by Pelli (1989) and King-Smith et al. (1994) as the best way to ascertain threshold.\n\n  var sd2 = QuestSd(q2); // Take the arithmetic mean of these two threshold (75%) estimates.\n\n  var tmean = math.mean([t1, t2]);\n  var sdmean = math.mean([sd1, sd2]);\n  console.log(t1, sd1, t2, sd2, tmean, sdmean);\n} //   To be used within context of QUEST-like program.  Defines intensities at\n//   which participants are likely to detect tone in noise at 75%\n//   (threshold), 50%, 25% probabilities.  First row of returned matrix are\n//   these labels.  The second gives the intensities in decibels, the third\n//   in scale units (coefficient used to scale full-scaled tone).  Required\n//   inputs are the QUEST structures produced by the CH QUEST procedure via\n//   ch_auditory_quest. q_1 and q_2 variables are the structures produced by\n//   the QUEST procedure.  t_mean is the arithmetic mean of the two threshold\n//   estimates produced by the two interleaved staircases.\n\nexport function process_data(q1, q2) {\n  var math = require('mathjs'); //Statistics\n\n\n  var t1 = QuestMean(q1); // Recommended by Pelli (1989) and King-Smith et al. (1994) as the best way to ascertain threshold.\n\n  var sd1 = QuestSd(q1);\n  var t2 = QuestMean(q2); // Recommended by Pelli (1989) and King-Smith et al. (1994) as the best way to ascertain threshold.\n\n  var sd2 = QuestSd(q2); // Take the arithmetic mean of these two threshold (75%) estimates.\n\n  var tmean = math.mean([t1, t2]);\n  var sdmean = math.mean([sd1, sd2]);\n  var lambda = 0; // normally in config file//////////////////////\n\n  var gamma = 0.01; // normally in config file//////////////////////\n\n  var intensities = gumbel_intensities(q1, q2, tmean, lambda, gamma);\n  return intensities;\n}\nexport function gumbel_intensities(q1, q2, tmean, lambda, gamma) {\n  var returnStruct = {\n    intensities: [],\n    parameters: [],\n    beta: 0\n  };\n  var intensities = [];\n  intensities.push([25, 50, 75, 90]);\n  intensities.push([]);\n\n  var math = require('mathjs');\n\n  var parameters = [];\n  parameters.push(ch_QuestBetaAnalysis(q1));\n  parameters.push(ch_QuestBetaAnalysis(q2));\n  returnStruct.parameters = parameters;\n  var mean_beta = 3.5; // changed 3/25/2019. Trying fixed beta at 3.5 (suggested generic beta value by Quest documentation) instead of individually estimating.\n\n  var mean_alpha = tmean;\n  var estimate_beta = math.mean(q1.beta, q2.beta);\n  returnStruct.beta = estimate_beta;\n\n  var fzero = require(\"fzero\");\n\n  var fn90 = function fn90(x) {\n    return (PAL_Gumbel(mean_alpha, mean_beta, gamma, lambda, x) - 0.90).toString();\n  };\n\n  var fn75 = function fn75(x) {\n    return (PAL_Gumbel(mean_alpha, mean_beta, gamma, lambda, x) - 0.75).toString();\n  };\n\n  var fn50 = function fn50(x) {\n    return (PAL_Gumbel(mean_alpha, mean_beta, gamma, lambda, x) - 0.50).toString();\n  };\n\n  var fn25 = function fn25(x) {\n    return (PAL_Gumbel(mean_alpha, mean_beta, gamma, lambda, x) - 0.25).toString();\n  };\n\n  var zero = fzero(fn25, 2).solution; //var zero = PAL_Gumbel(mean_alpha, mean_beta, gamma, lambda, 0);\n\n  intensities[1].push(parseFloat(fzero(fn25, 2).solution));\n  intensities[1].push(parseFloat(fzero(fn50, 2).solution));\n  intensities[1].push(parseFloat(fzero(fn75, 2).solution));\n  intensities[1].push(parseFloat(fzero(fn90, 2).solution));\n  intensities.push(intensities[1]);\n  returnStruct.intensities = intensities;\n  return returnStruct;\n}\nexport function ch_QuestBetaAnalysis(q) {\n  var math = require('mathjs');\n\n  var q2 = QuestCreate(q.tGuess, q.tGuessSd, q.pThreshold, math.eval(\"2^(1/4)\"), q.delta, q.gamma, 0.02);\n  q2.dim = 250;\n  var qq = QuestRecompute(q2);\n  var p = sumVector(qq.pdf);\n\n  if (p == 0) {\n    throw new Error(\"Beta has zero probability, \", p);\n  }\n\n  q2 = qq;\n  var t2 = QuestMean(q2); // estimate threshold for each possible beta\n\n  var p2 = QuestPdf(q2, t2); // get probability of each of these (threshold,beta) combinations\n\n  var sd2 = QuestSd(q2); // get sd of threshold for each possible beta\n\n  var beta2 = q2.beta;\n  var modeP = p2;\n  var t = t2;\n  var sd = QuestSd(q2);\n  var betaMean = math.sum(p2 * beta2) / modeP;\n  var betaSd = math.sqrt(math.sum(p2 * math.pow(beta2, 2)) / modeP - math.pow(math.sum(p2 * beta2) / modeP, 2));\n  var iBetaMean = math.sum(p2 / beta2) / modeP;\n  var iBetaSd = math.sqrt(math.sum(p2 / math.pow(beta2, 2)) / modeP - math.pow(math.sum(p2 / beta2) / modeP, 2));\n  var betaEstimate = 1 / iBetaMean;\n  var returnStruct = {\n    t: t,\n    sd: sd,\n    betaEstimate: betaEstimate,\n    iBetaSd: iBetaSd\n  };\n  return returnStruct;\n}","map":{"version":3,"sources":["C:\\Users\\Alika\\Desktop\\VCH_Smith\\src\\VisualQuest.js"],"names":["sumVector","QuestPdf","QuestRecompute","QuestCreate","QuestMean","QuestSd","QuestQuantile","QuestUpdate","PAL_Gumbel","indexOfMax","test","math","require","tGuess","tGuessSd","pThreshold","beta","delta","gamma","grain","range","q1","q2","updatePdf","console","log","t1","sd1","t2","sd2","tmean","mean","sdmean","process_data","lambda","intensities","gumbel_intensities","returnStruct","parameters","push","ch_QuestBetaAnalysis","mean_beta","mean_alpha","estimate_beta","fzero","fn90","x","toString","fn75","fn50","fn25","zero","solution","parseFloat","q","eval","dim","qq","p","pdf","Error","p2","beta2","modeP","t","sd","betaMean","sum","betaSd","sqrt","pow","iBetaMean","iBetaSd","betaEstimate"],"mappings":"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","sourcesContent":["import { sumVector, QuestPdf, QuestRecompute, QuestCreate, QuestMean, QuestSd, QuestQuantile, QuestUpdate, PAL_Gumbel, indexOfMax } from \"./Quest.js\"\r\n\r\nexport function test(){\r\n    const math = require('mathjs');\r\n\r\n    var tGuess = 0.5,\r\n      tGuessSd = 0.1,\r\n      pThreshold = 0.75,\r\n      beta = 3.5,\r\n      delta = 0.01,\r\n      gamma = 0.01,\r\n      grain = 0.001,\r\n      range = .05;\r\n    var q1 = QuestCreate(tGuess, tGuessSd, pThreshold, beta, delta, gamma, grain, range);\r\n\r\n    //console.log(q1); \r\n    var q2 = QuestCreate(tGuess, tGuessSd, pThreshold, beta, delta, gamma, grain, range);\r\n    q2.updatePdf = 1; \r\n    q2 = QuestUpdate(q2, 0.5, 1);\r\n    console.log(q2)\r\n    var t1 = QuestMean(q1);\t\t// Recommended by Pelli (1989) and King-Smith et al. (1994) as the best way to ascertain threshold.\r\n    var sd1 = QuestSd(q2);\r\n\r\n    var t2 = QuestMean(q2);\t\t// Recommended by Pelli (1989) and King-Smith et al. (1994) as the best way to ascertain threshold.\r\n    var sd2 = QuestSd(q2);\r\n\r\n    // Take the arithmetic mean of these two threshold (75%) estimates.\r\n    var tmean = math.mean([t1, t2]);\r\n    var sdmean = math.mean([sd1, sd2]);\r\n\r\n    console.log(t1, sd1, t2, sd2, tmean, sdmean);\r\n}\r\n\r\n//   To be used within context of QUEST-like program.  Defines intensities at\r\n//   which participants are likely to detect tone in noise at 75%\r\n//   (threshold), 50%, 25% probabilities.  First row of returned matrix are\r\n//   these labels.  The second gives the intensities in decibels, the third\r\n//   in scale units (coefficient used to scale full-scaled tone).  Required\r\n//   inputs are the QUEST structures produced by the CH QUEST procedure via\r\n//   ch_auditory_quest. q_1 and q_2 variables are the structures produced by\r\n//   the QUEST procedure.  t_mean is the arithmetic mean of the two threshold\r\n//   estimates produced by the two interleaved staircases.\r\n\r\nexport function process_data( q1, q2 ) {\r\n    const math = require('mathjs');\r\n\r\n    //Statistics\r\n    var t1 = QuestMean(q1);\t\t// Recommended by Pelli (1989) and King-Smith et al. (1994) as the best way to ascertain threshold.\r\n    var sd1 = QuestSd(q1);\r\n\r\n    var t2 = QuestMean(q2);\t\t// Recommended by Pelli (1989) and King-Smith et al. (1994) as the best way to ascertain threshold.\r\n    var sd2 = QuestSd(q2);\r\n\r\n    // Take the arithmetic mean of these two threshold (75%) estimates.\r\n    var tmean = math.mean([t1, t2]);\r\n    var sdmean = math.mean([sd1, sd2]);\r\n\r\n    var lambda = 0; // normally in config file//////////////////////\r\n    var gamma = 0.01; // normally in config file//////////////////////\r\n\r\n    var intensities = gumbel_intensities(q1, q2, tmean, lambda, gamma);\r\n\r\n    return intensities; \r\n  }\r\n\r\n  export function gumbel_intensities(q1, q2, tmean, lambda, gamma){\r\n\r\n    var returnStruct = {\r\n        intensities: [],\r\n        parameters: [],\r\n        beta: 0,\r\n    }\r\n\r\n    var intensities = []\r\n    intensities.push( [ 25, 50, 75, 90 ] );\r\n    intensities.push( [] );\r\n\r\n    const math = require('mathjs');\r\n\r\n    var parameters = []; \r\n\r\n    parameters.push(ch_QuestBetaAnalysis(q1));\r\n    parameters.push(ch_QuestBetaAnalysis(q2));\r\n    \r\n    returnStruct.parameters = parameters; \r\n\r\n    var mean_beta = 3.5;  // changed 3/25/2019. Trying fixed beta at 3.5 (suggested generic beta value by Quest documentation) instead of individually estimating.\r\n    var mean_alpha = tmean;\r\n    var estimate_beta = math.mean(q1.beta, q2.beta);\r\n    returnStruct.beta = estimate_beta;\r\n\r\n    var fzero = require(\"fzero\");\r\n\r\n    var fn90 = function (x) { return( PAL_Gumbel(mean_alpha, mean_beta, gamma, lambda, x) - 0.90 ).toString(); };\r\n    var fn75 = function (x) { return( PAL_Gumbel(mean_alpha, mean_beta, gamma, lambda, x) - 0.75 ).toString(); };\r\n    var fn50 = function (x) { return( PAL_Gumbel(mean_alpha, mean_beta, gamma, lambda, x) - 0.50 ).toString(); };\r\n    var fn25 = function (x) { return ( PAL_Gumbel(mean_alpha, mean_beta, gamma, lambda, x) - 0.25).toString();  };\r\n\r\n    var zero = fzero(fn25, 2).solution;\r\n    //var zero = PAL_Gumbel(mean_alpha, mean_beta, gamma, lambda, 0);\r\n    intensities[1].push( parseFloat(fzero(fn25, 2).solution) );\r\n    intensities[1].push( parseFloat(fzero(fn50, 2).solution) );\r\n    intensities[1].push( parseFloat(fzero(fn75, 2).solution) );\r\n    intensities[1].push( parseFloat(fzero(fn90, 2).solution) );\r\n    intensities.push(intensities[1]);\r\n\r\n    returnStruct.intensities = intensities; \r\n    \r\n    return returnStruct;\r\n  }\r\n\r\nexport function ch_QuestBetaAnalysis( q ){\r\n    \r\n    const math = require('mathjs');\r\n\r\n    var q2 =  QuestCreate( q.tGuess, q.tGuessSd, q.pThreshold, math.eval(\"2^(1/4)\"), q.delta, q.gamma, 0.02);\r\n    q2.dim = 250; \r\n    \r\n    var qq = QuestRecompute( q2 ); \r\n    var p = sumVector(qq.pdf); \r\n\r\n\r\n    if( p == 0 ){\r\n        throw new Error(\"Beta has zero probability, \", p);\r\n    }\r\n\r\n    q2 = qq; \r\n\r\n    var t2 = QuestMean( q2 ); // estimate threshold for each possible beta\r\n    var p2 = QuestPdf( q2, t2 ); // get probability of each of these (threshold,beta) combinations\r\n    var sd2 = QuestSd( q2 ); // get sd of threshold for each possible beta\r\n    var beta2 = q2.beta;\r\n\r\n\r\n    var modeP = p2;\r\n    var t = t2; \r\n    var sd = QuestSd(q2);\r\n    var betaMean = math.sum(p2 * beta2) / modeP;\r\n    var betaSd = math.sqrt(math.sum(p2 * math.pow(beta2, 2)) / modeP - math.pow((math.sum(p2 * beta2)/ modeP), 2)); \r\n\r\n    var iBetaMean = math.sum( p2 / beta2) / modeP;\r\n    var iBetaSd = math.sqrt(math.sum(p2 / math.pow(beta2, 2)) / modeP - math.pow((math.sum(p2/beta2) / modeP), 2));\r\n    var betaEstimate = 1 / iBetaMean;\r\n\r\n    var returnStruct = {\r\n        t: t,\r\n        sd: sd, \r\n        betaEstimate: betaEstimate, \r\n        iBetaSd: iBetaSd, \r\n    }\r\n\r\n    return returnStruct\r\n}"]},"metadata":{},"sourceType":"module"}